"""Initial migration

Revision ID: b29046cdb7f6
Revises: 
Create Date: 2024-11-28 22:47:22.026869

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b29046cdb7f6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    #op.drop_table('Supplier')
    #op.drop_table('FlatMan')
    #op.drop_table('Order')
    #op.drop_table('Invoice')
    #op.drop_table('MessageChat')
    #op.drop_table('Professional')
    #op.drop_table('Event')
    #op.drop_table('Product')
    #op.drop_table('FlatRoom')
    #op.drop_table('Mission')
    #op.drop_index('User_email_key', table_name='User')
    #op.drop_table('User')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('User',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"User_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('emailVerified', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('hashedPassword', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('darkSetting', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='User_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('User_email_key', 'User', ['email'], unique=True)
    op.create_table('Mission',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('professionalId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('endDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('eventId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('startDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('hasBeenAccepted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('hasConfirmed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('flatRoomId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['eventId'], ['Event.id'], name='Mission_eventId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['flatRoomId'], ['FlatRoom.id'], name='Mission_flatRoomId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['professionalId'], ['Professional.id'], name='Mission_professionalId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Mission_pkey')
    )
    op.create_table('FlatRoom',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"FlatRoom_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rentFrom', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('rentUntil', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('flatManId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flatManId'], ['FlatMan.id'], name='FlatRoom_flatManId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='FlatRoom_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Product',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Product_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subCategory', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priceWithoutTaxes', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('priceWithTaxes', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('tva', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('stock', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['supplierId'], ['Supplier.id'], name='Product_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Product_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Event',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('endDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('startDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Event_pkey')
    )
    op.create_table('Professional',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('surname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('companyName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('siret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('TVA', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('companyAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('availabilityEndDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('availabilityStartDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('companyCity', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Professional_pkey')
    )
    op.create_table('MessageChat',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sentTime', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('flatManId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['flatManId'], ['FlatMan.id'], name='MessageChat_flatManId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='MessageChat_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='MessageChat_pkey')
    )
    op.create_table('Invoice',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('billingCompanyName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('invoiceNumber', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('creationDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('paymentTerms', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('paymentDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('daysToPay', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('paymentType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingZipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingCity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingSurName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingTVA', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingSiret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tvaRate', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('priceWithoutTaxes', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('priceWithTaxes', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Invoice_pkey')
    )
    op.create_table('Order',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entryDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('subCategory', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('numberOrders', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('productId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flatRoomId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['flatRoomId'], ['FlatRoom.id'], name='Order_flatRoomId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['productId'], ['Product.id'], name='Order_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Order_pkey')
    )
    op.create_table('FlatMan',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('surname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('flatNumber', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('siret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('TVA', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingCompany', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingZipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingCity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='FlatMan_pkey')
    )
    op.create_table('Supplier',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contactName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contactSurname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('company', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supplierType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingZipCode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billingCity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('siret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tva', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Supplier_pkey')
    )
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
